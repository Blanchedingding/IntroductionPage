<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>dingding</groupId>
    <artifactId>springmvc</artifactId>
    <version>1.0</version>
    <packaging>war</packaging>

    <!-- 项目属性 -->
    <properties>
        <!--使用UTF-8编码-->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <!--web-->
        <spring.version>4.3.18.RELEASE</spring.version>
        <!-- 数据库版本 -->
        <mysql.version>5.7.18</mysql.version>
        <!-- jdk版本 -->
        <jdk.version>1.8</jdk.version>
        <!--mybatis版本-->
        <!--<mybatis.version>3.1.1</mybatis.version>-->

    </properties>


    <dependencies>
        <!--spring 开始-->
        <!--Spring框架基本的核心工具类，外部依赖Commons Logging， (Log4J)。-->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <!--为Spring核心提供了大量扩展。可以找到使用Spring ApplicationContext特性时所需的全部类，JDNI所需的全部类，
        UI方面的用来与模板（Templating）引擎如Velocity、FreeMarker、JasperReports集成的类，以及校验Validation方面的相关类-->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <!-- 含支持UI模版（Velocity，FreeMarker，JasperReports），邮件服务，脚本服务(JRuby)，缓存Cache（EHCache），
            任务计划Scheduling（uartz）方面的类。外部依赖spring-context, (spring-jdbc, Velocity, FreeMarker,
            JasperReports, BSH, Groovy, JRuby, Quartz, EHCache) -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context-support</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <!-- 所有应用都要用到的，它包含访问配置文件、创建和管理bean 以及 进行Inversion of Control / Dependency Injection（IoC/DI）操作相关的所有类。
            如果应用只需基本的IoC/DI 支持，引入spring-core.jar 及spring-beans.jar 文件就可以了。 外部依赖spring-core，(CGLIB)。 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-beans</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <!-- 包含Web 应用开发时，用到Spring 框架时所需的核心类，包括自动载入Web Application Context
            特性的类、Struts  与JSF 集成类、文件上传的支持类、Filter 类和大量工具辅助类。
            外部依赖spring-context, Servlet API, (JSP API, JSTL, Commons FileUpload, COS)。 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <!-- 包含对Spring 对JDBC 数据访问进行封装的所有类。 外部依赖spring-beans，spring-dao。 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <!-- 包含Spring对DAO特性集进行了扩展，使其支持 iBATIS、JDO、OJB、TopLink，
        因为Hibernate已经独立成包了，现在不包含在这个包里了。这个jar文件里大部分的类都要
            依赖spring-dao.jar里的类，用这个包时你需要同时包含spring-dao.jar包。 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-orm</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <!-- 包含Spring MVC 框架相关的所有类。包括框架的Servlets，Web MVC框架，控制器和视图支持。
          当然，如果你的应用使用了独立的MVC框架，则无需这个JAR 文件里的任何类。
          外部依赖spring-web, (spring-support，Tiles，iText，POI)。 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <!-- AOP（Aspect Oriented Programming），即面向切面编程（也叫面向方面编程，面向方法编程）。
            其主要作用是，在不修改源代码的情况下给某个或者一组操作添加额外的功能。像日志记录，事务处理，
            权限控制等功能，都可以用AOP来“优雅”地实现，使这些额外功能和真正的业务逻辑分离开来，
            软件的结构将更加清晰。AOP是OOP的一个强有力的补充。 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aop</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <!--切面-->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aspects</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <!-- 事务控制 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-tx</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <!-- SPEL表达式支持:
            一、基本表达式：字面量表达式、关系，逻辑与算数运算表达式、字符串连接及截取表达式、
                三目运算及Elivis表达式、正则表达式、括号优先级表达式；
            二、类相关表达式：类类型表达式、类实例化、instanceof表达式、变量定义及引用、赋值表达式、
                自定义函数、对象属性存取及安全导航表达式、对象方法调用、Bean引用；
            三、集合相关表达式：内联List、内联数组、集合，字典访问、列表，字典，数组修改、集合投影、
                集合选择；不支持多维内联数组初始化；不支持内联字典定义；
            四、其他表达式：模板表达式。
            注：SpEL表达式中的关键字是不区分大小写的。-->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-expression</artifactId>
            <version>4.3.3.RELEASE</version>
        </dependency>
        <!--spring结束-->

        <!--mybatis-->
        <!--<dependency>-->
            <!--<groupId>org.mybatis</groupId>-->
            <!--<artifactId>mybatis</artifactId>-->
            <!--<version>${mybatis.version}</version>-->
        <!--</dependency>-->
        <!--<dependency>-->
            <!--<groupId>org.mybatis</groupId>-->
            <!--<artifactId>mybatis-spring</artifactId>-->
            <!--<version>${mybatisspring.version}</version>-->
        <!--</dependency>-->

        <!--日志-->
        <!--<dependency>-->
            <!--<groupId>log4j</groupId>-->
            <!--<artifactId>log4j</artifactId>-->
            <!--<version>1.2.17</version>-->
        <!--</dependency>-->

        <!--test开始-->
        <!--<dependency>-->
            <!--<groupId>junit</groupId>-->
            <!--<artifactId>junit</artifactId>-->
            <!--<version>4.12</version>-->
            <!--<scope>test</scope>-->
        <!--</dependency>-->
        <!-- https://mvnrepository.com/artifact/org.springframework/spring-test
            spring测试框架，需要配合 最顶部的junit进行使用创建单元测试。 spring测试所需包：sring的相关组件，spring test ,junit -->
        <!--<dependency>-->
            <!--<groupId>org.springframework</groupId>-->
            <!--<artifactId>spring-test</artifactId>-->
            <!--<version>${spring.version}</version>-->
        <!--</dependency>-->
        <!--test结束-->

    </dependencies>


    <build>
        <plugins>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.0</version>
                <configuration>
                    <source>${jdk.version}</source>
                    <target>${jdk.version}</target>
                    <showWarnings>true</showWarnings>
                </configuration>
            </plugin>

            <plugin>
                <artifactId>maven-war-plugin</artifactId>
                <version>2.2</version>
            </plugin>

            <plugin>
                <groupId>org.apache.tomcat.maven</groupId>
                <artifactId>tomcat7-maven-plugin</artifactId>
                <version>2.2</version>
                <configuration>
                    <port>8082</port>
                    <path>/</path>
                    <uriEncoding>UTF-8</uriEncoding>
                    <server>tomcat7</server>
                </configuration>
            </plugin>

        </plugins>
    </build>

    
</project>